# Headless service to provide DNS lookup
# empdir yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
spec:
  clusterIP: None
  ports:
    - port: 9042
      name: cql
  selector:
    app: cassandra-data
----
# new API name
apiVersion: "apps/v1alpha1"
kind: PetSet
metadata:
  name: cassandra
spec:
  serviceName: cassandra
  # replicas are the same as used by Replication Controllers
  # except pets are deployed in order 0, 1, 2, 3, etc
  replicas: 3
  template:
    metadata:
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
      labels:
        app: cassandra-data
    spec:
      # just as other component in Kubernetes one
      # or more containers are deployed
      containers:
      - name: cassandra
        image: gcr.io/google-samples/cassandra:v9
        imagePullPolicy: Always
        command:
          - /run.sh
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 7001
          name: tls-intra-node
        - containerPort: 7199
          name: jmx
        - containerPort: 9042
          name: cql
#        securityContext:
#          privileged: true
        env:
          - name: MAX_HEAP_SIZE
            value: 512M
          - name: HEAP_NEWSIZE
            value: 100M
          # this is relying on guaranteed network identity of Pet Sets, we
          # will know the name of the Pets / Pod before they are created
          - name: CASSANDRA_SEEDS
            value: "cassandra-0.cassandra.default.svc.cluster.local,cassandra-1.cassandra.default.svc.cluster.local"
          - name: CASSANDRA_CLUSTER_NAME
            value: "JooTest"
          - name: CASSANDRA_DC
            value: "DC1-Data"
          - name: CASSANDRA_RACK
            value: "JooTest-Rack1-Data"
          - name: CASSANDRA_AUTO_BOOTSTRAP
            value: "false"
          # this variable is used by the read-probe looking
          # for the IP Address in a `nodetool status` command
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        # These volume mounts are persistent. They are like inline claims,
        # but not exactly because the names need to match exactly one of
        # the pet volumes.

        volumeMounts:
        # These volume mounts are persistent. They're like inline claims,
        # but not exactly because the names need to match exactly one of
        # the pet volumes.
        - name: data
          mountPath: /var/lib/cassandra
      volumes:
        - name: data
          emptyDir: {}
